// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/NoT-Ton/app/ent/bill"
	"github.com/NoT-Ton/app/ent/customer"
	"github.com/NoT-Ton/app/ent/product"
	"github.com/NoT-Ton/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Bill is the model entity for the Bill schema.
type Bill struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// AddedTime holds the value of the "added_time" field.
	AddedTime time.Time `json:"added_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BillQuery when eager-loading is set.
	Edges       BillEdges `json:"edges"`
	customer_id *int
	product_id  *int
	user_id     *int
}

// BillEdges holds the relations/edges for other nodes in the graph.
type BillEdges struct {
	// Product holds the value of the product edge.
	Product *Product
	// User holds the value of the user edge.
	User *User
	// Customer holds the value of the customer edge.
	Customer *Customer
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[0] {
		if e.Product == nil {
			// The edge product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BillEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[2] {
		if e.Customer == nil {
			// The edge customer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bill) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // quantity
		&sql.NullTime{},  // added_time
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Bill) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // customer_id
		&sql.NullInt64{}, // product_id
		&sql.NullInt64{}, // user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bill fields.
func (b *Bill) assignValues(values ...interface{}) error {
	if m, n := len(values), len(bill.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field quantity", values[0])
	} else if value.Valid {
		b.Quantity = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field added_time", values[1])
	} else if value.Valid {
		b.AddedTime = value.Time
	}
	values = values[2:]
	if len(values) == len(bill.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field customer_id", value)
		} else if value.Valid {
			b.customer_id = new(int)
			*b.customer_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field product_id", value)
		} else if value.Valid {
			b.product_id = new(int)
			*b.product_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_id", value)
		} else if value.Valid {
			b.user_id = new(int)
			*b.user_id = int(value.Int64)
		}
	}
	return nil
}

// QueryProduct queries the product edge of the Bill.
func (b *Bill) QueryProduct() *ProductQuery {
	return (&BillClient{config: b.config}).QueryProduct(b)
}

// QueryUser queries the user edge of the Bill.
func (b *Bill) QueryUser() *UserQuery {
	return (&BillClient{config: b.config}).QueryUser(b)
}

// QueryCustomer queries the customer edge of the Bill.
func (b *Bill) QueryCustomer() *CustomerQuery {
	return (&BillClient{config: b.config}).QueryCustomer(b)
}

// Update returns a builder for updating this Bill.
// Note that, you need to call Bill.Unwrap() before calling this method, if this Bill
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bill) Update() *BillUpdateOne {
	return (&BillClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Bill) Unwrap() *Bill {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bill is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bill) String() string {
	var builder strings.Builder
	builder.WriteString("Bill(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", quantity=")
	builder.WriteString(fmt.Sprintf("%v", b.Quantity))
	builder.WriteString(", added_time=")
	builder.WriteString(b.AddedTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Bills is a parsable slice of Bill.
type Bills []*Bill

func (b Bills) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
