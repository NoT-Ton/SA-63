// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/NoT-Ton/app/ent/bill"
	"github.com/NoT-Ton/app/ent/product"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ProductCreate is the builder for creating a Product entity.
type ProductCreate struct {
	config
	mutation *ProductMutation
	hooks    []Hook
}

// SetProductName sets the product_name field.
func (pc *ProductCreate) SetProductName(s string) *ProductCreate {
	pc.mutation.SetProductName(s)
	return pc
}

// SetProductCost sets the product_cost field.
func (pc *ProductCreate) SetProductCost(i int) *ProductCreate {
	pc.mutation.SetProductCost(i)
	return pc
}

// AddProductIDs adds the products edge to Bill by ids.
func (pc *ProductCreate) AddProductIDs(ids ...int) *ProductCreate {
	pc.mutation.AddProductIDs(ids...)
	return pc
}

// AddProducts adds the products edges to Bill.
func (pc *ProductCreate) AddProducts(b ...*Bill) *ProductCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pc.AddProductIDs(ids...)
}

// Mutation returns the ProductMutation object of the builder.
func (pc *ProductCreate) Mutation() *ProductMutation {
	return pc.mutation
}

// Save creates the Product in the database.
func (pc *ProductCreate) Save(ctx context.Context) (*Product, error) {
	if _, ok := pc.mutation.ProductName(); !ok {
		return nil, &ValidationError{Name: "product_name", err: errors.New("ent: missing required field \"product_name\"")}
	}
	if v, ok := pc.mutation.ProductName(); ok {
		if err := product.ProductNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "product_name", err: fmt.Errorf("ent: validator failed for field \"product_name\": %w", err)}
		}
	}
	if _, ok := pc.mutation.ProductCost(); !ok {
		return nil, &ValidationError{Name: "product_cost", err: errors.New("ent: missing required field \"product_cost\"")}
	}
	if v, ok := pc.mutation.ProductCost(); ok {
		if err := product.ProductCostValidator(v); err != nil {
			return nil, &ValidationError{Name: "product_cost", err: fmt.Errorf("ent: validator failed for field \"product_cost\": %w", err)}
		}
	}
	var (
		err  error
		node *Product
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProductCreate) SaveX(ctx context.Context) *Product {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *ProductCreate) sqlSave(ctx context.Context) (*Product, error) {
	pr, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}

func (pc *ProductCreate) createSpec() (*Product, *sqlgraph.CreateSpec) {
	var (
		pr    = &Product{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: product.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: product.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.ProductName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldProductName,
		})
		pr.ProductName = value
	}
	if value, ok := pc.mutation.ProductCost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldProductCost,
		})
		pr.ProductCost = value
	}
	if nodes := pc.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   product.ProductsTable,
			Columns: []string{product.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bill.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pr, _spec
}
