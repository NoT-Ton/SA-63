// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/NoT-Ton/app/ent/bill"
	"github.com/NoT-Ton/app/ent/customer"
	"github.com/NoT-Ton/app/ent/predicate"
	"github.com/NoT-Ton/app/ent/product"
	"github.com/NoT-Ton/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// BillUpdate is the builder for updating Bill entities.
type BillUpdate struct {
	config
	hooks      []Hook
	mutation   *BillMutation
	predicates []predicate.Bill
}

// Where adds a new predicate for the builder.
func (bu *BillUpdate) Where(ps ...predicate.Bill) *BillUpdate {
	bu.predicates = append(bu.predicates, ps...)
	return bu
}

// SetQuantity sets the quantity field.
func (bu *BillUpdate) SetQuantity(i int) *BillUpdate {
	bu.mutation.ResetQuantity()
	bu.mutation.SetQuantity(i)
	return bu
}

// AddQuantity adds i to quantity.
func (bu *BillUpdate) AddQuantity(i int) *BillUpdate {
	bu.mutation.AddQuantity(i)
	return bu
}

// SetAddedTime sets the added_time field.
func (bu *BillUpdate) SetAddedTime(t time.Time) *BillUpdate {
	bu.mutation.SetAddedTime(t)
	return bu
}

// SetNillableAddedTime sets the added_time field if the given value is not nil.
func (bu *BillUpdate) SetNillableAddedTime(t *time.Time) *BillUpdate {
	if t != nil {
		bu.SetAddedTime(*t)
	}
	return bu
}

// SetProductID sets the product edge to Product by id.
func (bu *BillUpdate) SetProductID(id int) *BillUpdate {
	bu.mutation.SetProductID(id)
	return bu
}

// SetNillableProductID sets the product edge to Product by id if the given value is not nil.
func (bu *BillUpdate) SetNillableProductID(id *int) *BillUpdate {
	if id != nil {
		bu = bu.SetProductID(*id)
	}
	return bu
}

// SetProduct sets the product edge to Product.
func (bu *BillUpdate) SetProduct(p *Product) *BillUpdate {
	return bu.SetProductID(p.ID)
}

// SetUserID sets the user edge to User by id.
func (bu *BillUpdate) SetUserID(id int) *BillUpdate {
	bu.mutation.SetUserID(id)
	return bu
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (bu *BillUpdate) SetNillableUserID(id *int) *BillUpdate {
	if id != nil {
		bu = bu.SetUserID(*id)
	}
	return bu
}

// SetUser sets the user edge to User.
func (bu *BillUpdate) SetUser(u *User) *BillUpdate {
	return bu.SetUserID(u.ID)
}

// SetCustomerID sets the customer edge to Customer by id.
func (bu *BillUpdate) SetCustomerID(id int) *BillUpdate {
	bu.mutation.SetCustomerID(id)
	return bu
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (bu *BillUpdate) SetNillableCustomerID(id *int) *BillUpdate {
	if id != nil {
		bu = bu.SetCustomerID(*id)
	}
	return bu
}

// SetCustomer sets the customer edge to Customer.
func (bu *BillUpdate) SetCustomer(c *Customer) *BillUpdate {
	return bu.SetCustomerID(c.ID)
}

// Mutation returns the BillMutation object of the builder.
func (bu *BillUpdate) Mutation() *BillMutation {
	return bu.mutation
}

// ClearProduct clears the product edge to Product.
func (bu *BillUpdate) ClearProduct() *BillUpdate {
	bu.mutation.ClearProduct()
	return bu
}

// ClearUser clears the user edge to User.
func (bu *BillUpdate) ClearUser() *BillUpdate {
	bu.mutation.ClearUser()
	return bu
}

// ClearCustomer clears the customer edge to Customer.
func (bu *BillUpdate) ClearCustomer() *BillUpdate {
	bu.mutation.ClearCustomer()
	return bu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bu *BillUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := bu.mutation.Quantity(); ok {
		if err := bill.QuantityValidator(v); err != nil {
			return 0, &ValidationError{Name: "quantity", err: fmt.Errorf("ent: validator failed for field \"quantity\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BillMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BillUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BillUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BillUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BillUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bill.Table,
			Columns: bill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bill.FieldID,
			},
		},
	}
	if ps := bu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldQuantity,
		})
	}
	if value, ok := bu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldQuantity,
		})
	}
	if value, ok := bu.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bill.FieldAddedTime,
		})
	}
	if bu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.ProductTable,
			Columns: []string{bill.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.ProductTable,
			Columns: []string{bill.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.UserTable,
			Columns: []string{bill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.UserTable,
			Columns: []string{bill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.CustomerTable,
			Columns: []string{bill.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.CustomerTable,
			Columns: []string{bill.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bill.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BillUpdateOne is the builder for updating a single Bill entity.
type BillUpdateOne struct {
	config
	hooks    []Hook
	mutation *BillMutation
}

// SetQuantity sets the quantity field.
func (buo *BillUpdateOne) SetQuantity(i int) *BillUpdateOne {
	buo.mutation.ResetQuantity()
	buo.mutation.SetQuantity(i)
	return buo
}

// AddQuantity adds i to quantity.
func (buo *BillUpdateOne) AddQuantity(i int) *BillUpdateOne {
	buo.mutation.AddQuantity(i)
	return buo
}

// SetAddedTime sets the added_time field.
func (buo *BillUpdateOne) SetAddedTime(t time.Time) *BillUpdateOne {
	buo.mutation.SetAddedTime(t)
	return buo
}

// SetNillableAddedTime sets the added_time field if the given value is not nil.
func (buo *BillUpdateOne) SetNillableAddedTime(t *time.Time) *BillUpdateOne {
	if t != nil {
		buo.SetAddedTime(*t)
	}
	return buo
}

// SetProductID sets the product edge to Product by id.
func (buo *BillUpdateOne) SetProductID(id int) *BillUpdateOne {
	buo.mutation.SetProductID(id)
	return buo
}

// SetNillableProductID sets the product edge to Product by id if the given value is not nil.
func (buo *BillUpdateOne) SetNillableProductID(id *int) *BillUpdateOne {
	if id != nil {
		buo = buo.SetProductID(*id)
	}
	return buo
}

// SetProduct sets the product edge to Product.
func (buo *BillUpdateOne) SetProduct(p *Product) *BillUpdateOne {
	return buo.SetProductID(p.ID)
}

// SetUserID sets the user edge to User by id.
func (buo *BillUpdateOne) SetUserID(id int) *BillUpdateOne {
	buo.mutation.SetUserID(id)
	return buo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (buo *BillUpdateOne) SetNillableUserID(id *int) *BillUpdateOne {
	if id != nil {
		buo = buo.SetUserID(*id)
	}
	return buo
}

// SetUser sets the user edge to User.
func (buo *BillUpdateOne) SetUser(u *User) *BillUpdateOne {
	return buo.SetUserID(u.ID)
}

// SetCustomerID sets the customer edge to Customer by id.
func (buo *BillUpdateOne) SetCustomerID(id int) *BillUpdateOne {
	buo.mutation.SetCustomerID(id)
	return buo
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (buo *BillUpdateOne) SetNillableCustomerID(id *int) *BillUpdateOne {
	if id != nil {
		buo = buo.SetCustomerID(*id)
	}
	return buo
}

// SetCustomer sets the customer edge to Customer.
func (buo *BillUpdateOne) SetCustomer(c *Customer) *BillUpdateOne {
	return buo.SetCustomerID(c.ID)
}

// Mutation returns the BillMutation object of the builder.
func (buo *BillUpdateOne) Mutation() *BillMutation {
	return buo.mutation
}

// ClearProduct clears the product edge to Product.
func (buo *BillUpdateOne) ClearProduct() *BillUpdateOne {
	buo.mutation.ClearProduct()
	return buo
}

// ClearUser clears the user edge to User.
func (buo *BillUpdateOne) ClearUser() *BillUpdateOne {
	buo.mutation.ClearUser()
	return buo
}

// ClearCustomer clears the customer edge to Customer.
func (buo *BillUpdateOne) ClearCustomer() *BillUpdateOne {
	buo.mutation.ClearCustomer()
	return buo
}

// Save executes the query and returns the updated entity.
func (buo *BillUpdateOne) Save(ctx context.Context) (*Bill, error) {
	if v, ok := buo.mutation.Quantity(); ok {
		if err := bill.QuantityValidator(v); err != nil {
			return nil, &ValidationError{Name: "quantity", err: fmt.Errorf("ent: validator failed for field \"quantity\": %w", err)}
		}
	}

	var (
		err  error
		node *Bill
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BillMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BillUpdateOne) SaveX(ctx context.Context) *Bill {
	b, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return b
}

// Exec executes the query on the entity.
func (buo *BillUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BillUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BillUpdateOne) sqlSave(ctx context.Context) (b *Bill, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bill.Table,
			Columns: bill.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bill.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Bill.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldQuantity,
		})
	}
	if value, ok := buo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: bill.FieldQuantity,
		})
	}
	if value, ok := buo.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: bill.FieldAddedTime,
		})
	}
	if buo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.ProductTable,
			Columns: []string{bill.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.ProductTable,
			Columns: []string{bill.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.UserTable,
			Columns: []string{bill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.UserTable,
			Columns: []string{bill.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.CustomerTable,
			Columns: []string{bill.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bill.CustomerTable,
			Columns: []string{bill.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	b = &Bill{config: buo.config}
	_spec.Assign = b.assignValues
	_spec.ScanValues = b.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bill.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return b, nil
}
