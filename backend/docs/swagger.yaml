basePath: /api/v1
definitions:
  controllers.Bill:
    properties:
      addtime:
        type: string
      customerID:
        type: integer
      productID:
        type: integer
      quantityID:
        type: integer
      userID:
        type: integer
    type: object
  ent.Bill:
    properties:
      added_time:
        description: AddedTime holds the value of the "added_time" field.
        type: string
      edges:
        $ref: '#/definitions/ent.BillEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the BillQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      quantity:
        description: Quantity holds the value of the "quantity" field.
        type: integer
    type: object
  ent.BillEdges:
    properties:
      customer:
        $ref: '#/definitions/ent.Customer'
        description: Customer holds the value of the customer edge.
        type: object
      product:
        $ref: '#/definitions/ent.Product'
        description: Product holds the value of the product edge.
        type: object
      user:
        $ref: '#/definitions/ent.User'
        description: User holds the value of the user edge.
        type: object
    type: object
  ent.Customer:
    properties:
      customer_name:
        description: CustomerName holds the value of the "customer_name" field.
        type: string
      edges:
        $ref: '#/definitions/ent.CustomerEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the CustomerQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.CustomerEdges:
    properties:
      buys:
        description: Buys holds the value of the buys edge.
        items:
          $ref: '#/definitions/ent.Bill'
        type: array
    type: object
  ent.Product:
    properties:
      edges:
        $ref: '#/definitions/ent.ProductEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ProductQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      product_cost:
        description: ProductCost holds the value of the "product_cost" field.
        type: integer
      product_name:
        description: ProductName holds the value of the "product_name" field.
        type: string
    type: object
  ent.ProductEdges:
    properties:
      products:
        description: Products holds the value of the products edge.
        items:
          $ref: '#/definitions/ent.Bill'
        type: array
    type: object
  ent.Role:
    properties:
      edges:
        $ref: '#/definitions/ent.RoleEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the RoleQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      role_name:
        description: RoleName holds the value of the "role_name" field.
        type: string
    type: object
  ent.RoleEdges:
    properties:
      roles:
        description: Roles holds the value of the roles edge.
        items:
          $ref: '#/definitions/ent.User'
        type: array
    type: object
  ent.User:
    properties:
      edges:
        $ref: '#/definitions/ent.UserEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the UserQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      user_email:
        description: UserEmail holds the value of the "user_email" field.
        type: string
      user_name:
        description: UserName holds the value of the "user_name" field.
        type: string
    type: object
  ent.UserEdges:
    properties:
      role:
        $ref: '#/definitions/ent.Role'
        description: Role holds the value of the role edge.
        type: object
      sells:
        description: Sells holds the value of the sells edge.
        items:
          $ref: '#/definitions/ent.Bill'
        type: array
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API
  version: "1.0"
paths:
  /bills:
    get:
      description: list bill entities
      operationId: list-bill
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Bill'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List bill entities
    post:
      consumes:
      - application/json
      description: Create bill
      operationId: create-bill
      parameters:
      - description: Bill entity
        in: body
        name: bill
        required: true
        schema:
          $ref: '#/definitions/controllers.Bill'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Bill'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create bill
  /bills/{id}:
    delete:
      description: get bill by ID
      operationId: delete-bill
      parameters:
      - description: Bill ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a bill entity by ID
  /customers:
    get:
      description: list customer entities
      operationId: list-customer
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Customer'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List customer entities
    post:
      consumes:
      - application/json
      description: Create customer
      operationId: create-customer
      parameters:
      - description: Customer entity
        in: body
        name: Customer
        required: true
        schema:
          $ref: '#/definitions/ent.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create customer
  /customers/{id}:
    delete:
      description: get customer by ID
      operationId: delete-customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a customer entity by ID
    get:
      description: get customer by ID
      operationId: get-customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a customer entity by ID
    put:
      consumes:
      - application/json
      description: update customer by ID
      operationId: update-customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Customer entity
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/ent.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Customer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a customer entity by ID
  /products:
    get:
      description: list product entities
      operationId: list-product
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List product entities
    post:
      consumes:
      - application/json
      description: Create product
      operationId: create-product
      parameters:
      - description: Product entity
        in: body
        name: Product
        required: true
        schema:
          $ref: '#/definitions/ent.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create product
  /products/{id}:
    delete:
      description: get product by ID
      operationId: delete-product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a product entity by ID
    get:
      description: get product by ID
      operationId: get-product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a product entity by ID
    put:
      consumes:
      - application/json
      description: update product by ID
      operationId: update-product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Product entity
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/ent.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a product entity by ID
  /roles:
    get:
      description: list role entities
      operationId: list-role
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Role'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List role entities
    post:
      consumes:
      - application/json
      description: Create role
      operationId: create-role
      parameters:
      - description: Role entity
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/ent.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create role
  /roles/{id}:
    delete:
      description: get role by ID
      operationId: delete-role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a role entity by ID
    get:
      description: get role by ID
      operationId: get-role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a role entity by ID
    put:
      consumes:
      - application/json
      description: update role by ID
      operationId: update-role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role entity
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/ent.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a role entity by ID
  /users:
    get:
      description: list user entities
      operationId: list-user
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List user entities
    post:
      consumes:
      - application/json
      description: Create user
      operationId: create-user
      parameters:
      - description: User entity
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create user
  /users/{id}:
    delete:
      description: get user by ID
      operationId: delete-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a user entity by ID
    get:
      description: get user by ID
      operationId: get-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a user entity by ID
    put:
      consumes:
      - application/json
      description: update user by ID
      operationId: update-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User entity
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a user entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
